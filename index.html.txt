<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
  <title>Endless Runner â€” Shield, Shoot, BGM</title>
  <style>
    :root { color-scheme: dark; }
    html,body{height:100%;margin:0}
    body{display:grid;place-items:center;background:#0b0d11;font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Inter,Arial,sans-serif;color:#e9ecf1}
    .wrap{width:min(95vw,980px)}
    .card{background:#121722;border:1px solid #242a3a;border-radius:18px;box-shadow:0 16px 40px rgba(0,0,0,.55);overflow:hidden}
    header{display:flex;align-items:center;justify-content:space-between;padding:14px 18px;background:#0f1320}
    header h1{font-size:15px;margin:0;font-weight:700;letter-spacing:.3px;opacity:.95}
    header .ctrl{display:flex;gap:8px;align-items:center}
    button{cursor:pointer;border:none;background:#1b2030;color:#dfe7ff;padding:8px 12px;border-radius:10px;font-weight:600}
    button:hover{background:#242c43}
    button:active{transform:translateY(1px)}
    .hud{display:flex;gap:14px;align-items:center;padding:8px 16px;font-variant-numeric:tabular-nums;background:#0f1320;border-top:1px solid #242a3a}
    .tag{padding:4px 8px;border:1px solid #303753;border-radius:999px;font-size:12px;opacity:.95}
    canvas{display:block;width:min(95vw,980px);height:auto;background:linear-gradient(#0d1222,#0a101a 70%,#0b0f17);}
    .help{padding:12px 16px;color:#cfd7ff;background:#0f1320;border-top:1px solid #242a3a;font-size:12.5px;line-height:1.5}
    .kbd{display:inline-block;padding:2px 7px;border:1px solid #3a4261;border-radius:6px;background:#161c2e;color:#e6ebff;font-weight:700;font-size:12px}
    .mobile{display:none}
    @media (pointer:none), (pointer:coarse){
      .mobile{display:flex;gap:10px;padding:10px;justify-content:center}
      .mobile button{flex:1}
    }
  </style>
</head>
<body>
  <div class="wrap">
    <div class="card">
      <header>
        <h1>Endless Runner â€” Shield + Shoot + BGM</h1>
        <div class="ctrl">
          <button id="btnStart">Start</button>
          <button id="btnMute">ðŸ”Š</button>
        </div>
      </header>
      <canvas id="game" width="960" height="420" aria-label="Game Canvas"></canvas>
      <div class="hud">
        <span class="tag">Score: <b id="score">0</b></span>
        <span class="tag">Best: <b id="best">0</b></span>
        <span class="tag">Shield: <b id="shield">0</b></span>
        <span class="tag">Ammo: <b id="ammo">0</b></span>
        <span class="tag">Speed: <b id="spd">1.00x</b></span>
        <span class="tag" id="status">Ready</span>
      </div>
      <div class="help">
        <b>Kontrol:</b> <span class="kbd">W</span>/<span class="kbd">â†‘</span>/<span class="kbd">Spasi</span> lompat <i>(double jump di udara)</i> Â· <span class="kbd">J</span> tembak Â· <span class="kbd">M</span> mute/unmute Â· Ambil <i>powerâ€‘up</i> peluru & shield.
        <div class="mobile"><button id="mJump">Lompat</button><button id="mShoot">Tembak</button></div>
      </div>
    </div>
  </div>

<script>
(() => {
  // --- Utilities ---
  const clamp=(v,a,b)=>Math.max(a,Math.min(b,v));
  const rand=(a,b)=>Math.random()*(b-a)+a;
  const lerp=(a,b,t)=>a+(b-a)*t;

  // --- Canvas ---
  const cvs = document.getElementById('game');
  const ctx = cvs.getContext('2d');
  const W = cvs.width, H = cvs.height;

  // --- DOM HUD ---
  const elScore = document.getElementById('score');
  const elBest = document.getElementById('best');
  const elShield = document.getElementById('shield');
  const elAmmo = document.getElementById('ammo');
  const elSpd = document.getElementById('spd');
  const elStatus = document.getElementById('status');
  const btnStart = document.getElementById('btnStart');
  const btnMute = document.getElementById('btnMute');
  const mJump = document.getElementById('mJump');
  const mShoot = document.getElementById('mShoot');

  // --- Audio (WebAudio, no external files) ---
  const AudioSys = (()=>{
    const ctx = new (window.AudioContext||window.webkitAudioContext)();
    let masterGain = ctx.createGain(); masterGain.gain.value = 0.6; masterGain.connect(ctx.destination);
    let muted = false;

    function blip(freq=440, dur=0.1, type='sine', vol=0.2){
      if(muted) return;
      const o = ctx.createOscillator();
      const g = ctx.createGain();
      o.type = type; o.frequency.setValueAtTime(freq, ctx.currentTime);
      g.gain.value = vol; g.gain.exponentialRampToValueAtTime(0.0001, ctx.currentTime + dur);
      o.connect(g).connect(masterGain); o.start(); o.stop(ctx.currentTime + dur);
    }

    // Simple BGM arpeggio loop
    let bgmTimer=null; let bpm=108; let step=0; let bgmOn=false;
    function startBGM(){
      if(bgmOn) return; bgmOn=true; const beat = 60/bpm*1000; // ms
      bgmTimer = setInterval(()=>{
        if(muted) return;
        const scale = [196.00, 246.94, 293.66, 329.63, 392.00, 493.88, 587.33]; // G major-ish
        const root = 196; // G3
        const pat = [0,2,4,6,4,2,0,2];
        const freq = scale[pat[step%pat.length]];
        blip(freq, 0.09, 'triangle', 0.05);
        if(step%4===0) blip(root/2, 0.25, 'sawtooth', 0.03); // bass hit
        step++;
      }, beat);
    }
    function stopBGM(){ if(bgmTimer){ clearInterval(bgmTimer); bgmTimer=null; } bgmOn=false; }

    return { ctx, blip, startBGM, stopBGM, get muted(){return muted;}, toggle(){ muted=!muted; masterGain.gain.value = muted? 0 : 0.6; } };
  })();

  // --- Game State ---
  let running=false, gameOver=false;
  let score=0, best=Number(localStorage.er_best||0);
  let speed=260; // px/s world speed
  let t=0, last=0;

  const gravity=1350, jumpV=-480;

  const player={x:120,y:H-84,w:36,h:44,vy:0,onGround:false, col(){return {x:this.x, y:this.y, w:this.w, h:this.h};},
                shield:0, ammo:0, inv:0, jumps:0};

  /** Arrays */
  const obstacles=[]; // {x,y,w,h,hp}
  const pickups=[];   // {x,y,r,type:'shield'|'ammo', val}
  const bullets=[];   // {x,y,vx,life}
  const particles=[]; // {x,y,vx,vy,life,clr}

  // --- Spawners ---
  let obsTimer=0, pickTimer=0;

  function reset(){
    running=true; gameOver=false; score=0; speed=260; t=0; last=0;
    player.y=H-84; player.vy=0; player.onGround=true; player.shield=0; player.ammo=0; player.inv=0; player.jumps=0;
    obstacles.length=0; pickups.length=0; bullets.length=0; particles.length=0; obsTimer=pickTimer=0;
    elStatus.textContent='Running';
    AudioSys.startBGM();
  }

  // --- Helpers ---
  function AABB(a,b){ return a.x < b.x + b.w && a.x + a.w > b.x && a.y < b.y + b.h && a.y + a.h > b.y; }
  function rect(x,y,w,h,clr){ ctx.fillStyle=clr; ctx.fillRect(x,y,w,h); }
  function roundRect(x, y, w, h, r, clr){ ctx.fillStyle=clr; ctx.beginPath(); ctx.moveTo(x+r,y); ctx.arcTo(x+w,y,x+w,y+h,r); ctx.arcTo(x+w,y+h,x,y+h,r); ctx.arcTo(x,y+h,x,y,r); ctx.arcTo(x,y,x+w,y,r); ctx.closePath(); ctx.fill(); }
  function circle(x,y,r,clr){ ctx.fillStyle=clr; ctx.beginPath(); ctx.arc(x,y,r,0,Math.PI*2); ctx.fill(); }

  function spawnObstacle(){
    const baseH = 40 + Math.floor(rand(0,3))*22; // step heights
    const w = 26 + Math.floor(rand(0,3))*16;
    const h = baseH;
    const y = H-40 - h;
    const hp = 1 + (Math.random()<0.2?1:0); // some tougher blocks
    obstacles.push({x:W+20,y,w,h,hp});
  }
  function spawnPickup(){
    const type = Math.random()<0.55? 'ammo' : 'shield';
    const y = H-120 - rand(0,80);
    const val = type==='ammo'? (3+Math.floor(rand(0,3))*2) : 1; // 3/5/7 ammo, or 1 shield
    pickups.push({x:W+20,y,r:12,type,val});
  }

  function shoot(){
    if(player.ammo<=0) return; player.ammo--; elAmmo.textContent=player.ammo;
    bullets.push({x:player.x+player.w+2, y:player.y+player.h*0.38, vx:560, life:1.2});
    AudioSys.blip(720,0.07,'square',0.15);
  }

  function jump(){
    // Double jump: maksimal 2 lompatan sebelum menyentuh tanah lagi
    if(player.onGround || player.jumps < 2){
      if(player.onGround){ player.jumps = 1; } else { player.jumps++; }
      player.vy = jumpV * (player.jumps===2 ? 0.92 : 1);
      player.onGround = false;
      AudioSys.blip(player.jumps===1?260:320,0.07,'sine',0.12);
    }
  }

  // --- Input ---
  addEventListener('keydown',e=>{
    if(['ArrowUp','KeyW','Space'].includes(e.code)){ e.preventDefault(); jump(); }
    else if(e.code==='KeyJ'){ e.preventDefault(); shoot(); }
    else if(e.code==='KeyM'){ e.preventDefault(); AudioSys.toggle(); btnMute.textContent = AudioSys.muted? 'ðŸ”‡' : 'ðŸ”Š'; }
  });
  mJump.addEventListener('click', jump);
  mShoot.addEventListener('click', shoot);

  btnStart.addEventListener('click', ()=>{ if(!running||gameOver) reset(); });
  btnMute.addEventListener('click', ()=>{ AudioSys.toggle(); btnMute.textContent = AudioSys.muted? 'ðŸ”‡' : 'ðŸ”Š'; });

  // --- Game Loop ---
  function update(dt){
    t+=dt; score += dt* (speed*0.05); elScore.textContent = Math.floor(score);
    speed = clamp( lerp(speed, 260 + score*0.2, 0.004), 260, 900 );
    elSpd.textContent = (speed/260).toFixed(2)+'x';

    // spawn logic
    obsTimer -= dt; pickTimer -= dt;
    if(obsTimer<=0){ spawnObstacle(); obsTimer = rand(0.75, 1.35) * (260/speed); }
    if(pickTimer<=0){ spawnPickup(); pickTimer = rand(2.2, 3.6) * (260/speed); }

    // physics player
    player.vy += gravity*dt; player.y += player.vy*dt;
    const groundY = H-40 - player.h;
    if(player.y>=groundY){ player.y=groundY; player.vy=0; player.onGround=true; player.jumps=0; }
    if(player.inv>0) player.inv-=dt;

    // bullets
    for(let i=bullets.length-1;i>=0;i--){
      const b=bullets[i]; b.x += b.vx*dt; b.life-=dt; if(b.life<=0||b.x>W+40) bullets.splice(i,1);
    }

    // obstacles
    for(let i=obstacles.length-1;i>=0;i--){
      const o=obstacles[i]; o.x -= speed*dt;
      if(o.x+o.w< -40){ obstacles.splice(i,1); continue; }

      // bullet hit
      for(let j=bullets.length-1;j>=0;j--){
        const b=bullets[j];
        if(b.x>o.x && b.x<o.x+o.w && b.y>o.y && b.y<o.y+o.h){
          o.hp--; bullets.splice(j,1);
          for(let k=0;k<8;k++) particles.push({x:b.x,y:b.y,vx:rand(-90,90),vy:rand(-150,-10),life:0.5,clr:'#9ad5ff'});
          AudioSys.blip(520,0.06,'triangle',0.12);
          if(o.hp<=0){
            for(let k=0;k<18;k++) particles.push({x:o.x+o.w/2,y:o.y+o.h/2,vx:rand(-180,180),vy:rand(-220,-20),life:0.7,clr:'#b3f8ff'});
            obstacles.splice(i,1); score+=15; elScore.textContent=Math.floor(score);
            AudioSys.blip(220,0.05,'sawtooth',0.1);
          }
          break;
        }
      }

      // collide with player
      const pcol = player.col();
      if(AABB({x:pcol.x,y:pcol.y,w:pcol.w,h:pcol.h},{x:o.x,y:o.y,w:o.w,h:o.h})){
        if(player.shield>0){
          // consume one shield & shatter obstacle
          player.shield--; elShield.textContent=player.shield; player.inv=0.6;
          for(let k=0;k<20;k++) particles.push({x:o.x+o.w/2,y:o.y+o.h/2,vx:rand(-220,220),vy:rand(-260,-40),life:0.8,clr:'#9effd6'});
          obstacles.splice(i,1); AudioSys.blip(340,0.06,'square',0.16);
        } else if(player.inv<=0){
          doGameOver();
          return;
        }
      }
    }

    // pickups
    for(let i=pickups.length-1;i>=0;i--){
      const pk=pickups[i]; pk.x -= speed*dt; if(pk.x<-30){ pickups.splice(i,1); continue; }
      // collide
      const p = player.col();
      if(pk.x>p.x-12 && pk.x<p.x+p.w+12 && pk.y>p.y-12 && pk.y<p.y+p.h+12){
        if(pk.type==='ammo'){ player.ammo += pk.val; elAmmo.textContent=player.ammo; AudioSys.blip(780,0.08,'square',0.15);} 
        else { player.shield += pk.val; elShield.textContent=player.shield; AudioSys.blip(500,0.1,'sine',0.14);} 
        for(let k=0;k<12;k++) particles.push({x:pk.x,y:pk.y,vx:rand(-120,120),vy:rand(-160,-20),life:0.5,clr: pk.type==='ammo'? '#ffd18a':'#9effd6'});
        pickups.splice(i,1);
      }
    }

    // particles
    for(let i=particles.length-1;i>=0;i--){ const p=particles[i]; p.x+=p.vx*dt; p.y+=p.vy*dt; p.vy+=600*dt; p.life-=dt; if(p.life<=0) particles.splice(i,1); }
  }

  function doGameOver(){
    gameOver=true; running=false; elStatus.textContent='Game Over';
    best = Math.max(best, Math.floor(score)); localStorage.er_best = best; elBest.textContent=best;
    AudioSys.blip(140,0.35,'sawtooth',0.2); AudioSys.stopBGM();
  }

  // --- Render ---
  function draw(){
    ctx.clearRect(0,0,W,H);

    // Parallax BG
    const t1 = (t*0.15*speed)%W; const t2 = (t*0.25*speed)%W; const t3 = (t*0.5*speed)%W;
    ctx.fillStyle = '#0a0f1a'; ctx.fillRect(0,0,W,H);
    // distant stars
    ctx.globalAlpha=0.35; for(let i=0;i<90;i++){ const x=((i*73.7+t*40)%W); const y=(i*53% (H-200)); ctx.fillRect(x,y,2,2); }
    ctx.globalAlpha=1;

    // mountains
    function hills(offset, amt, col){
      ctx.fillStyle=col;
      for(let i=0;i<amt;i++){
        const x = (i*240 - offset%240); const y = H-160;
        ctx.beginPath(); ctx.moveTo(x-40,y); ctx.lineTo(x+80,y-80); ctx.lineTo(x+200,y); ctx.closePath(); ctx.fill();
      }
    }
    hills(t1, 8, '#111a2d');
    hills(t2, 10, '#0f1730');

    // ground
    ctx.fillStyle = '#0f1524'; ctx.fillRect(0,H-40,W,40);
    for(let i=0;i<30;i++){ const x = (i*64 - t3%64); rect(x,H-42,28,2,'#1b2441'); }

    // player
    const glow = player.inv>0? 0.6:0.0;
    roundRect(player.x, player.y, player.w, player.h, 8, '#9ab6ff');
    if(player.shield>0){ ctx.globalAlpha=0.35+glow; circle(player.x+player.w/2, player.y+player.h/2, player.w*0.9, '#7dffd1'); ctx.globalAlpha=1; }
    // visor
    roundRect(player.x+6, player.y+10, player.w-12, 10, 6, '#0b0f1a');

    // obstacles
    for(const o of obstacles){
      const col = o.hp>1? '#ff8aa8' : '#ffb86b';
      roundRect(o.x, o.y, o.w, o.h, 6, col);
      // bolts
      rect(o.x+6,o.y+6,4,10,'#24151b'); rect(o.x+o.w-10,o.y+o.h-16,4,10,'#24151b');
    }

    // bullets
    for(const b of bullets){ circle(b.x,b.y,4,'#fff'); rect(b.x-2,b.y-1,8,2,'#d7f1ff'); }

    // pickups
    for(const pk of pickups){
      if(pk.type==='ammo'){
        roundRect(pk.x-12, pk.y-8, 24, 16, 6, '#ffd18a'); rect(pk.x-2, pk.y-8, 4, 16, '#9a6b2a');
      } else { circle(pk.x,pk.y,12,'#7dffd1'); circle(pk.x,pk.y,6,'#0a121a'); }
    }

    // particles
    for(const p of particles){ ctx.globalAlpha = Math.max(0,p.life); rect(p.x,p.y,3,3,p.clr); ctx.globalAlpha=1; }

    // overlay text
    ctx.fillStyle='#9fb1ff'; ctx.font='14px system-ui,Segoe UI,Roboto';
    ctx.fillText('W/â†‘/Space: Jump Â· J: Shoot Â· M: Mute', 12, 22);
    if(!running && !gameOver){ ctx.font='26px system-ui,Segoe UI,Roboto'; ctx.fillStyle='#dfe7ff'; ctx.fillText('Tekan Start untuk bermain', W/2-160, H/2); }
    if(gameOver){ ctx.font='28px system-ui,Segoe UI,Roboto'; ctx.fillStyle='#ffd7e1'; ctx.fillText('Game Over â€” tekan Start untuk ulang', W/2-220, H/2); }
  }

  function loop(ts){
    if(!last) last=ts; const dt = Math.min(0.033, (ts-last)/1000); last=ts; // clamp 30 FPS step max
    if(running) update(dt);
    draw();
    requestAnimationFrame(loop);
  }

  // expose best at start
  elBest.textContent = best;
  draw(); requestAnimationFrame(loop);

  // =====================
  // Minimal Test Cases
  // =====================
  (function runTests(){
    const results=[]; const assert=(cond,msg)=>results.push({ok:!!cond,msg});
    // AABB tests
    assert(!AABB({x:0,y:0,w:10,h:10},{x:20,y:20,w:5,h:5}), 'AABB non-overlap');
    assert(AABB({x:0,y:0,w:10,h:10},{x:5,y:5,w:5,h:5}), 'AABB overlap');
    // Double jump logic
    const snap = {...player};
    player.onGround=true; player.jumps=0; jump(); assert(player.jumps===1,'Jump #1 increments to 1');
    player.onGround=false; jump(); assert(player.jumps===2,'Jump #2 increments to 2');
    const after2 = player.vy; jump(); assert(player.jumps===2,'No Jump #3 while airborne');
    player.onGround=true; player.jumps=0; // reset like landing
    Object.assign(player,snap);
    // Report
    const ok = results.every(r=>r.ok); if(!ok){ console.warn('TESTS FAILED',results); elStatus.textContent='Tests failed'; } else { console.log('All tests passed',results); }
  })();
})();
</script>
</body>
</html>
